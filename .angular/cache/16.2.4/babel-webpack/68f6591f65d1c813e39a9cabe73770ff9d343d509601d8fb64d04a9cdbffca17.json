{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOption = {\n  headers: new HttpHeaders({\n    \"Content-Type\": \"application/json\"\n  })\n};\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = \"http://localhost:5000/tasks\";\n  }\n  getTasks() {\n    return this.http.get(this.apiUrl);\n  }\n  deleteTask(task) {\n    const url = `${this.apiUrl}/${task.id}`;\n    return this.http.delete(url);\n  }\n  updateTaskReminder(task) {\n    const url = `${this.apiUrl}/${task.id}`;\n    return this.http.put(url, task, httpOption);\n  }\n  static #_ = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["HttpHeaders","httpOption","headers","TaskService","constructor","http","apiUrl","getTasks","get","deleteTask","task","url","id","delete","updateTaskReminder","put","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/mrdiscipline/angular/Task-tracker-angular/src/app/services/task.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Task } from \"../Task\";\n\nconst httpOption = {\n  headers: new HttpHeaders({\n    \"Content-Type\": \"application/json\",\n  }),\n};\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TaskService {\n  private apiUrl = \"http://localhost:5000/tasks\";\n\n  constructor(private http: HttpClient) {}\n\n  getTasks(): Observable<Task[]> {\n    return this.http.get<Task[]>(this.apiUrl);\n  }\n\n  deleteTask(task: Task): Observable<Task> {\n    const url = `${this.apiUrl}/${task.id}`;\n    return this.http.delete<Task>(url);\n  }\n\n  updateTaskReminder(task: Task): Observable<Task> {\n    const url = `${this.apiUrl}/${task.id}`;\n    return this.http.put<Task>(url, task, httpOption);\n  }\n}\n"],"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAG9D,MAAMC,UAAU,GAAG;EACjBC,OAAO,EAAE,IAAIF,WAAW,CAAC;IACvB,cAAc,EAAE;GACjB;CACF;AAKD,OAAM,MAAOG,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,6BAA6B;EAEP;EAEvCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,MAAM,CAAC;EAC3C;EAEAG,UAAUA,CAACC,IAAU;IACnB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,IAAII,IAAI,CAACE,EAAE,EAAE;IACvC,OAAO,IAAI,CAACP,IAAI,CAACQ,MAAM,CAAOF,GAAG,CAAC;EACpC;EAEAG,kBAAkBA,CAACJ,IAAU;IAC3B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,IAAII,IAAI,CAACE,EAAE,EAAE;IACvC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAOJ,GAAG,EAAED,IAAI,EAAET,UAAU,CAAC;EACnD;EAAC,QAAAe,CAAA,G;qBAjBUb,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXlB,WAAW;IAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}